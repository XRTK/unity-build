name: 'Unity Build (XRTK)'
description: 'Runs a Build using the specified build targets'
branding:
  icon: 'box'
  color: 'blue'

inputs:
  build-target:
    description: 'The build target to build for.'
    # Unity -buildTarget command line args https://docs.unity3d.com/Manual/CommandLineArguments.html
    # StandaloneWindows64, WSAPlayer, StandaloneOSX, iOS, StandaloneLinux64, Android, Lumin, WebGL
    default: ''
  additional-validate-args:
    description: 'Additional args to pass to validate command'
    default: ''
  additional-test-args:
    description: 'Additional args to pass to test command'
    default: ''
  additional-build-args:
    description: 'Additional args to pass to build command'
    default: ''

runs:
  using: "composite"
  steps:
    - uses: xrtk/unity-action@v4
      name: Project Validation
      with:
        log-name: 'project-validation'
        args: '-quit -nographics -batchmode -executeMethod XRTK.Editor.BuildPipeline.UnityPlayerBuildTools.ValidateProject ${{ inputs.additional-validate-args }}'

    - uses: xrtk/unity-action@v4
      name: '${{ inputs.build-target }}-Tests'
      with:
        log-name: '${{ inputs.build-target }}-Tests'
        build-target: '${{ inputs.build-target }}'
        args: '-nographics -batchmode -runEditorTests ${{ inputs.additional-test-args }}'

    - uses: xrtk/unity-action@v4
      name: '${{ inputs.build-target }}-Build'
      with:
        log-name: '${{ inputs.build-target }}-Build'
        build-target: '${{ inputs.build-target }}'
        args: '-quit -nographics -batchmode -executeMethod XRTK.Editor.BuildPipeline.UnityPlayerBuildTools.StartCommandLineBuild ${{ inputs.additional-build-args }}'

    - uses: josStorer/get-current-time@v2.0.2
      if: always()
      id: current-time
      with:
        format: YYYY-MM-DDTHH.mm.ss.sssZ

    - uses: actions/upload-artifact@v3
      name: Upload Artifacts
      if: always()
      with:
        name: '${{ runner.os }}-${{ inputs.build-target }}-Artifacts-${{ steps.current-time.outputs.formattedTime }}'
        path: '${{ env.UNITY_PROJECT_PATH }}/Builds'

    - name: Clean Artifacts
      if: always()
      run: |
        # Clean Artifacts
        $artifacts = "${{ env.UNITY_PROJECT_PATH }}/Builds"

        if (Test-Path -Path $artifacts) {
          Remove-Item $artifacts -Force -Recurse
        }
      shell: pwsh
